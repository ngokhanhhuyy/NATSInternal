@namespace NATSInternal.Blazor.Components
@inject NavigationManager NavigationManager

<ul id="navbar" class="w-100 @NavigationBarClass">
    <CascadingValue Value="CurrentRouteName">
        <NavigationBarItem Href="/" IconClass="bi bi-house">
            @DisplayNames.Home
        </NavigationBarItem>

        <NavigationBarItem Href="/customer" IconClass="bi bi-person-circle">
            @DisplayNames.Customer
        </NavigationBarItem>

        <NavigationBarItem Href="/product" IconClass="bi bi-box-seam">
            @DisplayNames.Product
        </NavigationBarItem>

        <NavigationBarItem Href="/supply" IconClass="bi bi-truck">
            @DisplayNames.Supply
        </NavigationBarItem>

        <NavigationBarItem Href="/order" IconClass="bi bi-cart4">
            @DisplayNames.Order
        </NavigationBarItem>

        <NavigationBarItem Href="/treatment" IconClass="bi bi-magic">
            @DisplayNames.Treatment
        </NavigationBarItem>

        <NavigationBarItem Href="/consultant" IconClass="bi bi-patch-question">
            @DisplayNames.Consultant
        </NavigationBarItem>

        <NavigationBarItem Href="/debt" IconClass="bi bi-hourglass-bottom">
            @DisplayNames.Debt
        </NavigationBarItem>

        <NavigationBarItem Href="/expense" IconClass="bi bi-cash-coin">
            @DisplayNames.Expense
        </NavigationBarItem>

        <NavigationBarItem Href="/user" IconClass="bi bi-person-badge">
            @DisplayNames.User
        </NavigationBarItem>
    </CascadingValue>
</ul>

@code {
    [Parameter]
    public bool KeepExpanded { get; set; }

    private string CurrentRouteName { get; set; }
    private string NavigationBarClass => KeepExpanded ? "keep-expanded" : null;

    protected override void OnInitialized()
    {
        UpdateCurrentRoute();
        NavigationManager.LocationChanged += OnCurrentRouteChanged;
    }

    private void OnCurrentRouteChanged(object sender, LocationChangedEventArgs eventArgs)
    {
        UpdateCurrentRoute();
        InvokeAsync(StateHasChanged);
    }

    private void UpdateCurrentRoute()
    {
        CurrentRouteName = NavigationManager
            .ToBaseRelativePath(NavigationManager.Uri)
            .Split("/")
            .First()
            .ToLower();
    }

    private string ItemClass(string itemName)
    {
        if (itemName == "Home" && CurrentRouteName == string.Empty)
        {
            return "selected";
        }

        if (CurrentRouteName == itemName.ToLower())
        {
            return "selected";
        }

        return null;
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnCurrentRouteChanged;
    }
}