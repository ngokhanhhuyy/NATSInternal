@using System.Security.Claims
@inject IUserService UserService
@inject AuthenticationStateProvider AuthStateProvider
@inject IAuthorizationService AuthorizationService

<div class="current-user-container dropdown d-flex flex-row
            h-100 justify-content-end align-items-center"
        id="current-user">
    <div class="d-md-flex d-sm-none d-none flex-column
                align-items-end justify-content-center">
        <div class="fullname">@Model.PersonalInformation.FullName</div>
        <div class="username">@Model.UserName</div>
    </div>
    <button class="btn p-0 ms-2 avatar-container focus-ring" type="button"
            data-bs-toggle="dropdown" aria-expanded="false">
        <img src="@Model.PersonalInformation.AvatarUrl" class="avatar">
    </button>
    <div class="dropdown-menu dropdown-menu-end border-primary-subtle shadow p-0
                overflow-hidden">
        <ul class="list-group list-group-flush">
            <li class="list-group-item">
                <a class="w-100 h-100">
                    <i class="bi bi-person-badge me-3"></i>
                    <span>Trang cá nhân</span>
                </a>
            </li>
            <li class="list-group-item">
                <a class="w-100 h-100">
                    <i class="bi bi-box-arrow-right me-3"></i>
                    <span>Sửa hồ sơ</span>
                </a>
            </li>
            <li class="list-group-item">
                <a class="w-100 h-100">
                    <i class="bi bi-asterisk me-3"></i>
                    <span>Đổi mật khẩu</span>
                </a>
            </li>
            <li class="list-group-item">
                <a asp-action="SignOut" asp-controller="Authentication" class="w-100 h-100">
                    <i class="bi bi-box-arrow-right me-3"></i>
                    <span class="text-danger">Đăng xuất</span>
                </a>
            </li>
        </ul>
    </div>
</div>

@code {
    private UserDetailModel Model { get; set; }

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthStateProvider.GetAuthenticationStateAsync();
        ClaimsPrincipal user = authState.User;
        string userIdAsString = user.FindFirst(ClaimTypes.NameIdentifier)?
            .Value;
        int.TryParse(userIdAsString, out int userId);
        UserDetailResponseDto responseDto = await UserService.GetDetailAsync(userId);
        Model = new UserDetailModel(responseDto);
    }
}