@namespace NATSInternal.Blazor.Components
@rendermode InteractiveServer

<div class="d-flex flex-row justify-content-center mb-5">
    <button class="btn mx-1 btn-outline-primary page-button"
            disabled="@(Page == 1)">
        Trang đầu
    </button>
    @for (int i = LargeScreenPaginationRange.StartingPage;
            i <= LargeScreenPaginationRange.EndingPage;
            i++)
    {
        <button class="btn mx-1 btn-outline-primary page-button @PaginationButtonClassName(i)"
                @onclick="@(async () => { await PageClicked.InvokeAsync(i);
                              Console.WriteLine(i);
                          })">
        </button>
    }
    <button class="btn mx-1 btn-outline-primary page-button"
            disabled="@(Page == PageCount)">
        Trang cuối
    </button>
</div>

@code {
    [Parameter]
    public int Page { get; set; }

    [Parameter]
    public int PageCount { get; set; }

    [Parameter]
    public EventCallback<int> PageClicked { get; set; }

    private PaginationRangeModel LargeScreenPaginationRange => CalculateRange(5);

    private PaginationRangeModel SmallScreenPaginationRange => CalculateRange(3);
    
    private string PaginationButtonClassName(int page)
    {
        string className = "";
        if (page == Page)
        {
            className += "active";
        }

        bool exceedLeft = page < LargeScreenPaginationRange.StartingPage;
        bool exceedRight = page > SmallScreenPaginationRange.EndingPage;
        if (exceedLeft || exceedRight)
        {
            className += " d-sm-flex d-none";
        }

        return className;
    }

    private PaginationRangeModel CalculateRange(int visibleButtonCount)
    {
        int startingPage;
        int endingPage;
        
        if (PageCount >= visibleButtonCount)
        {
            if (Page - (int)Math.Floor((double)visibleButtonCount / 2) <= 1)
            {
                startingPage = 1;
                endingPage = startingPage + (visibleButtonCount - 1);
            }
            else if (Page + (int)Math.Floor((double)visibleButtonCount / 2) > PageCount)
            {
                endingPage = PageCount;
                startingPage = endingPage - (visibleButtonCount - 1);
            }
            else
            {
                startingPage = (int)Math.Ceiling(Page - (double)visibleButtonCount / 2);
                endingPage = (int)Math.Floor(Page + (double)visibleButtonCount / 2);
            }
        }
        else
        {
            startingPage = 1;
            endingPage = Page;
        }

        return new PaginationRangeModel
        {
            StartingPage = startingPage,
            EndingPage = endingPage
        };
    }
}