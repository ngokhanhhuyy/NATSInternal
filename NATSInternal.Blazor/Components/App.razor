@namespace NATSInternal.Blazor.Components
@using System.Security.Claims
@inject IAuthorizationService _authorizationService
@inject AuthenticationStateProvider _authenticationStateProvider

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet"
            href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="./app.css" />
    <link rel="stylesheet" href="./NATSInternal.Blazor.styles.css" />
    <link rel="icon" type="image/png" href="favicon.png" />
    <script src="@_popperJsSrc"></script>
    <script src="@_bootstrapJsSrc"></script>

    <HeadOutlet />
</head>

<body>
    <Routes />
    <script src="_framework/blazor.web.js"></script>
</body>

</html>

@code {
    private string _popperJsSrc = "https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js";
    private string _bootstrapJsSrc = "https://cdn.jsdelivr.net/npm/bootstrap@@5.3.3/dist/js/bootstrap.min.js";

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authenticationState = await _authenticationStateProvider
            .GetAuthenticationStateAsync();
        string userIdAsString = authenticationState.User
            .FindFirst(ClaimTypes.NameIdentifier)?
            .Value;
        int userId = int.Parse(userIdAsString);
        await _authorizationService.SetUserId(userId);
    }
}
