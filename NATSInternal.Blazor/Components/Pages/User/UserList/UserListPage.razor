@page "/user"
@namespace NATSInternal.Blazor.Components
@inject IUserService UserService
@inject IRoleService RoleService
@rendermode InteractiveServer

<MainContainer Render="@(!IsInitialLoading)">
    <div class="row g-0">
        <div class="col col-xl-8 col-12">
            <div class="row g-3">
                <!-- List filters -->
                <div class="col col-12">
                    <UserListFilters @bind-Value="Model" SearchButtonClicked="ReloadAsync"
                            RoleButtonClicked="ReloadAsync"/>
                </div>
            </div>

            <!-- List items -->
            <div class="row g-3 justify-content-start">
                @if (Model.Items.Any())
                {
                    @foreach (UserBasicModel user in Model.Items)
                    {
                        <div class="col col-xl-4 col-lg-4 col-md-4 col-sm-6 col-6">
                            <UserListItem Model="user"/>
                        </div>
                    }
                }
                else
                {
                    <div class="col col-12">
                        <div class="block border rounded-3 py-4 bg-white d-flex
                                justify-content-center align-items-center">
                            <span class="opacity-50">Không tìm thấy kết quả nào</span>
                        </div>
                    </div>
                }
            </div>

            @if (Model.PageCount > 1)
            {
                <div class="col col-12 d-flex flex-row justify-content-center mb-5">
                    <MainPaginator Page="Model.Page" PageCount="Model.PageCount"
                            PageClicked="OnPaginationPageButtonClicked" />
                </div>
            }
        </div>

        <!-- Secondary lists -->
        <div class="col col-xl-4 col-lg-12 col-md-12 col-sm-12 col-12">
            <div class="row g-3">
                <div class="col col-xl-12 col-lg-6 col-md-6 col-12">
                    <UserSecondaryList Mode="@UserSecondaryListMode.JoinedRecently"
                            Model="@Model.JoinedRecentlyUsers" />
                </div>
                <div class="col col-xl-12 col-lg-6 col-md-6 col-12">
                    <UserSecondaryList Mode="@UserSecondaryListMode.UpcomingBirthday"
                            Model="@Model.UpcomingBirthdayUsers"/>
                </div>
            </div>
        </div>
    </div>
</MainContainer>

@code {
    private UserListModel Model { get; set; }
    private bool IsInitialLoading { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        UserListResponseDto listResponseDto;
        listResponseDto = await UserService.GetListAsync(new UserListRequestDto());

        List<UserBasicResponseDto> joinedRecentlyUsersTaskResponseDto;
        joinedRecentlyUsersTaskResponseDto = await LoadJoinedRecentlyUsers();
        
        List<UserBasicResponseDto> upcomingBirthdayUsersResponseDto;
        upcomingBirthdayUsersResponseDto = await LoadUpcomingBirthdayUsers();

        List<RoleMinimalResponseDto> roleOptionsResponseDto;
        roleOptionsResponseDto = await RoleService.GetAllAsync();
        
        ListSortingOptionsResponseDto sortingOptionsResponseDto;
        sortingOptionsResponseDto = UserService.GetListSortingOptions();
        
        bool canCreate = UserService.GetCreatingPermission();
        
        Model = new UserListModel(
            listResponseDto,
            sortingOptionsResponseDto,
            roleOptionsResponseDto,
            joinedRecentlyUsersTaskResponseDto,
            upcomingBirthdayUsersResponseDto,
            canCreate);
        
        IsInitialLoading = false;
    }

    private async Task ReloadAsync()
    {
        UserListResponseDto responseDto = await UserService.GetListAsync(Model.ToRequestDto());
        Model.MapListResponseDto(responseDto);
    }

    private async Task<List<UserBasicResponseDto>> LoadJoinedRecentlyUsers()
    {
        UserListResponseDto responseDto = await UserService.GetListAsync(new UserListRequestDto
        {
            JoinedRencentlyOnly = true
        });

        return responseDto.Items;
    }

    private async Task<List<UserBasicResponseDto>> LoadUpcomingBirthdayUsers()
    {
        UserListResponseDto responseDto = await UserService.GetListAsync(new UserListRequestDto
        {
            UpcomingBirthdayOnly = true
        });

        return responseDto.Items;
    }

    private async Task OnPaginationPageButtonClicked(int page)
    {
        Model.Page = page;
        await ReloadAsync();
        StateHasChanged();
        Console.WriteLine(Model.Page);
    }
}
