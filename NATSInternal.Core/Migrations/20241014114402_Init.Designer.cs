// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NATSInternal.Core;

#nullable disable

namespace NATSInternal.Core.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20241014114402_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext")
                        .HasColumnName("claim_value");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("id");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("INDEX__role_claimsrole_id");

                    b.ToTable("role_claims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext")
                        .HasColumnName("claim_value");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("id");

                    b.ToTable("user_claims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext")
                        .HasColumnName("provider_display_name");

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("provider_key");

                    b.HasKey("UserId")
                        .HasName("user_id");

                    b.ToTable("user_logins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("longtext")
                        .HasColumnName("value");

                    b.HasKey("UserId")
                        .HasName("user_id");

                    b.ToTable("user_tokens");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.Announcement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("int")
                        .HasColumnName("category");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("varchar(5000)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_datetime");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int")
                        .HasColumnName("created_user_id");

                    b.Property<DateTime>("EndingDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ending_datetime");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("row_version");

                    b.Property<DateTime>("StartingDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("starting_datetime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("id");

                    b.HasIndex("CreatedUserId")
                        .HasDatabaseName("INDEX__announcementscreated_user_id");

                    b.ToTable("announcements");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("address");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("country_id");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("phone_number");

                    b.Property<string>("SocialMediaUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("social_media_url");

                    b.Property<string>("ThumbnailUrl")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("thumbnail_url");

                    b.Property<string>("Website")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("website");

                    b.HasKey("Id")
                        .HasName("id");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("INDEX__brandscountry_id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("UNIQUE__brandsname");

                    b.ToTable("brands");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.Consultant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("AmountBeforeVat")
                        .HasColumnType("bigint")
                        .HasColumnName("amount_before_vat");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_datetime");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int")
                        .HasColumnName("created_user_id");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("note");

                    b.Property<DateTime>("StatsDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("stats_datetime");

                    b.Property<long>("VatAmount")
                        .HasColumnType("bigint")
                        .HasColumnName("vat_amount");

                    b.HasKey("Id")
                        .HasName("id");

                    b.HasIndex("CreatedUserId")
                        .HasDatabaseName("INDEX__consultantscreated_user_id");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("INDEX__consultantscustomer_id");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("INDEX__consultantsis_deleted");

                    b.HasIndex("StatsDateTime")
                        .HasDatabaseName("INDEX__consultantsstats_datetime");

                    b.ToTable("consultants");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.ConsultantUpdateHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ConsultantId")
                        .HasColumnType("int")
                        .HasColumnName("consultant_id");

                    b.Property<string>("NewData")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("JSON")
                        .HasColumnName("new_data");

                    b.Property<string>("OldData")
                        .HasMaxLength(1000)
                        .HasColumnType("JSON")
                        .HasColumnName("old_data");

                    b.Property<string>("Reason")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("reason");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_datetime");

                    b.Property<int>("UpdatedUserId")
                        .HasColumnType("int")
                        .HasColumnName("updated_user_id");

                    b.HasKey("Id")
                        .HasName("id");

                    b.HasIndex("ConsultantId")
                        .HasDatabaseName("INDEX__update_historiesconsultant_id");

                    b.HasIndex("UpdatedDateTime")
                        .HasDatabaseName("INDEX__update_historiesupdated_datetime");

                    b.HasIndex("UpdatedUserId")
                        .HasDatabaseName("INDEX__update_historiesupdated_user_id");

                    b.ToTable("update_histories");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("UNIQUE__countriescode");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("UNIQUE__countriesname");

                    b.ToTable("countries");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("address");

                    b.Property<DateOnly?>("Birthday")
                        .HasColumnType("date")
                        .HasColumnName("birthday");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_datetime");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int")
                        .HasColumnName("created_user_id");

                    b.Property<string>("Email")
                        .HasMaxLength(320)
                        .HasColumnType("varchar(320)")
                        .HasColumnName("email");

                    b.Property<string>("FacebookUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("facebook_url");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("first_name");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("fullname");

                    b.Property<int>("Gender")
                        .HasColumnType("int")
                        .HasColumnName("gender");

                    b.Property<int?>("IntroducerId")
                        .HasColumnType("int")
                        .HasColumnName("introducer_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("last_name");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("middle_name");

                    b.Property<string>("NickName")
                        .HasMaxLength(35)
                        .HasColumnType("varchar(35)")
                        .HasColumnName("nick_name");

                    b.Property<string>("NormalizedFirstName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("normalized_first_name");

                    b.Property<string>("NormalizedFullName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("normalized_fullname");

                    b.Property<string>("NormalizedLastName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("normalized_last_name");

                    b.Property<string>("NormalizedMiddleName")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("normalized_middle_name");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("note");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("phone_number");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("row_version");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_datetime");

                    b.Property<string>("ZaloNumber")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("zalo_number");

                    b.HasKey("Id")
                        .HasName("id");

                    b.HasIndex("CreatedUserId")
                        .HasDatabaseName("INDEX__customerscreated_user_id");

                    b.HasIndex("IntroducerId")
                        .HasDatabaseName("INDEX__customersintroducer_id");

                    b.ToTable("customers");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.DailyStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("ConsultantGrossRevenue")
                        .HasColumnType("bigint")
                        .HasColumnName("consultant_gross_revenue");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_datetime");

                    b.Property<long>("DebtIncurredAmount")
                        .HasColumnType("bigint")
                        .HasColumnName("debt_incurred_amount");

                    b.Property<long>("DebtPaidAmount")
                        .HasColumnType("bigint")
                        .HasColumnName("debt_paid_amount");

                    b.Property<long>("EquipmentExpenses")
                        .HasColumnType("bigint")
                        .HasColumnName("equipment_expenses");

                    b.Property<int>("MonthlyStatsId")
                        .HasColumnType("int")
                        .HasColumnName("monthly_stats_id");

                    b.Property<long>("OfficeExpense")
                        .HasColumnType("bigint")
                        .HasColumnName("office_expense");

                    b.Property<DateTime?>("OfficiallyClosedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("officially_closed_datetime");

                    b.Property<DateOnly>("RecordedDate")
                        .HasColumnType("date")
                        .HasColumnName("recorded_date");

                    b.Property<long>("RetailGrossRevenue")
                        .HasColumnType("bigint")
                        .HasColumnName("retail_gross_revenue");

                    b.Property<long>("ShipmentCost")
                        .HasColumnType("bigint")
                        .HasColumnName("shipment_cost");

                    b.Property<long>("StaffExpense")
                        .HasColumnType("bigint")
                        .HasColumnName("staff_expense");

                    b.Property<long>("SupplyCost")
                        .HasColumnType("bigint")
                        .HasColumnName("supply_cost");

                    b.Property<DateTime?>("TemporarilyClosedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("temporarily_closed_datetime");

                    b.Property<long>("TreatmentGrossRevenue")
                        .HasColumnType("bigint")
                        .HasColumnName("treatment_gross_revenue");

                    b.Property<long>("UtilitiesExpenses")
                        .HasColumnType("bigint")
                        .HasColumnName("utilities_expenses");

                    b.Property<long>("VatCollectedAmount")
                        .HasColumnType("bigint")
                        .HasColumnName("vat_collected_amount");

                    b.HasKey("Id")
                        .HasName("id");

                    b.HasIndex("MonthlyStatsId")
                        .HasDatabaseName("INDEX__daily_statsmonthly_stats_id");

                    b.HasIndex("RecordedDate")
                        .IsUnique()
                        .HasDatabaseName("UNIQUE__daily_statsrecorded_date");

                    b.ToTable("daily_stats");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.DebtIncurrence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("AmountBeforeVat")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_datetime");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int")
                        .HasColumnName("created_user_id");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("note");

                    b.Property<DateTime>("StatsDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("stats_datetime");

                    b.HasKey("Id")
                        .HasName("id");

                    b.HasIndex("CreatedUserId")
                        .HasDatabaseName("INDEX__debt_incurrencescreated_user_id");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("INDEX__debt_incurrencescustomer_id");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("INDEX__debt_incurrencesis_deleted");

                    b.HasIndex("StatsDateTime")
                        .HasDatabaseName("INDEX__debt_incurrencesstats_datetime");

                    b.ToTable("debt_incurrences");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.DebtIncurrenceUpdateHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DebtIncurrenceId")
                        .HasColumnType("int")
                        .HasColumnName("debt_incurrence_id");

                    b.Property<string>("NewData")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("JSON")
                        .HasColumnName("new_data");

                    b.Property<string>("OldData")
                        .HasMaxLength(1000)
                        .HasColumnType("JSON")
                        .HasColumnName("old_data");

                    b.Property<string>("Reason")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("reason");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_datetime");

                    b.Property<int>("UpdatedUserId")
                        .HasColumnType("int")
                        .HasColumnName("updated_user_id");

                    b.HasKey("Id")
                        .HasName("id");

                    b.HasIndex("DebtIncurrenceId")
                        .HasDatabaseName("INDEX__debt_incurrence_update_historiesdebt_incurrence_id");

                    b.HasIndex("UpdatedDateTime")
                        .HasDatabaseName("INDEX__debt_incurrence_update_historiesupdated_datetime");

                    b.HasIndex("UpdatedUserId")
                        .HasDatabaseName("INDEX__debt_incurrence_update_historiesupdated_user_id");

                    b.ToTable("debt_incurrence_update_histories");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.DebtPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("AmountBeforeVat")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_datetime");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int")
                        .HasColumnName("created_user_id");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("note");

                    b.Property<DateTime>("StatsDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("stats_datetime");

                    b.HasKey("Id")
                        .HasName("id");

                    b.HasIndex("CreatedUserId")
                        .HasDatabaseName("INDEX__debt_paymentscreated_user_id");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("INDEX__debt_paymentscustomer_id");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("INDEX__debt_paymentsis_deleted");

                    b.HasIndex("StatsDateTime")
                        .HasDatabaseName("INDEX__debt_paymentsstats_datetime");

                    b.ToTable("debt_payments");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.DebtPaymentUpdateHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DebtPaymentId")
                        .HasColumnType("int")
                        .HasColumnName("debt_payment_id");

                    b.Property<string>("NewData")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("JSON")
                        .HasColumnName("new_data");

                    b.Property<string>("OldData")
                        .HasMaxLength(1000)
                        .HasColumnType("JSON")
                        .HasColumnName("old_data");

                    b.Property<string>("Reason")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("reason");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_datetime");

                    b.Property<int>("UpdatedUserId")
                        .HasColumnType("int")
                        .HasColumnName("updated_user_id");

                    b.HasKey("Id")
                        .HasName("id");

                    b.HasIndex("DebtPaymentId")
                        .HasDatabaseName("INDEX__debt_payment_update_historiesdebt_payment_id");

                    b.HasIndex("UpdatedDateTime")
                        .HasDatabaseName("INDEX__debt_payment_update_historiesupdated_datetime");

                    b.HasIndex("UpdatedUserId")
                        .HasDatabaseName("INDEX__debt_payment_update_historiesupdated_user_id");

                    b.ToTable("debt_payment_update_histories");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.Expense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("AmountBeforeVat")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<int>("Category")
                        .HasColumnType("int")
                        .HasColumnName("category");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_datetime");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int")
                        .HasColumnName("created_user_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("note");

                    b.Property<int>("PayeeId")
                        .HasColumnType("int")
                        .HasColumnName("payee_id");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("row_version");

                    b.Property<DateTime>("StatsDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("stats_datetime");

                    b.HasKey("Id")
                        .HasName("id");

                    b.HasIndex("CreatedUserId")
                        .HasDatabaseName("INDEX__expensescreated_user_id");

                    b.HasIndex("PayeeId")
                        .HasDatabaseName("INDEX__expensespayee_id");

                    b.ToTable("expenses");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.ExpensePayee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("row_version");

                    b.HasKey("Id")
                        .HasName("id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("UNIQUE__expense_payeesname");

                    b.ToTable("expense_payees");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.ExpensePhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ExpenseId")
                        .HasColumnType("int")
                        .HasColumnName("expense_id");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("row_version");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("id");

                    b.HasIndex("ExpenseId")
                        .HasDatabaseName("INDEX__expense_photosexpense_id");

                    b.HasIndex("Url")
                        .IsUnique()
                        .HasDatabaseName("UNIQUE__expense_photosurl");

                    b.ToTable("expense_photos");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.ExpenseUpdateHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ExpenseId")
                        .HasColumnType("int")
                        .HasColumnName("expense_id");

                    b.Property<string>("NewData")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("JSON")
                        .HasColumnName("new_data");

                    b.Property<string>("OldData")
                        .HasMaxLength(1000)
                        .HasColumnType("JSON")
                        .HasColumnName("old_data");

                    b.Property<string>("Reason")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("reason");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_datetime");

                    b.Property<int>("UpdatedUserId")
                        .HasColumnType("int")
                        .HasColumnName("updated_user_id");

                    b.HasKey("Id")
                        .HasName("id");

                    b.HasIndex("ExpenseId")
                        .HasDatabaseName("INDEX__expense_update_historiesexpense_id");

                    b.HasIndex("UpdatedDateTime")
                        .HasDatabaseName("INDEX__expense_update_historiesupdated_datetime");

                    b.HasIndex("UpdatedUserId")
                        .HasDatabaseName("INDEX__expense_update_historiesupdated_user_id");

                    b.ToTable("expense_update_histories");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.MonthlyStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("ConsultantGrossRevenue")
                        .HasColumnType("bigint")
                        .HasColumnName("consultant_gross_revenue");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_datetime");

                    b.Property<long>("DebtIncurredAmount")
                        .HasColumnType("bigint")
                        .HasColumnName("debt_incurred_amount");

                    b.Property<long>("DebtPaidAmount")
                        .HasColumnType("bigint")
                        .HasColumnName("debt_paid_amount");

                    b.Property<long>("EquipmentExpenses")
                        .HasColumnType("bigint")
                        .HasColumnName("equipment_expenses");

                    b.Property<long>("OfficeExpense")
                        .HasColumnType("bigint")
                        .HasColumnName("office_expense");

                    b.Property<DateTime?>("OfficiallyClosedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("officially_closed_datetime");

                    b.Property<int>("RecordedMonth")
                        .HasColumnType("int")
                        .HasColumnName("recorded_month");

                    b.Property<int>("RecordedYear")
                        .HasColumnType("int")
                        .HasColumnName("recorded_year");

                    b.Property<long>("RetailGrossRevenue")
                        .HasColumnType("bigint")
                        .HasColumnName("retail_gross_revenue");

                    b.Property<long>("ShipmentCost")
                        .HasColumnType("bigint")
                        .HasColumnName("shipment_cost");

                    b.Property<long>("StaffExpense")
                        .HasColumnType("bigint")
                        .HasColumnName("staff_expense");

                    b.Property<long>("SupplyCost")
                        .HasColumnType("bigint")
                        .HasColumnName("supply_cost");

                    b.Property<DateTime?>("TemporarilyClosedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("temporarily_closed_datetime");

                    b.Property<long>("TreatmentGrossRevenue")
                        .HasColumnType("bigint")
                        .HasColumnName("treatment_gross_revenue");

                    b.Property<long>("UtilitiesExpenses")
                        .HasColumnType("bigint")
                        .HasColumnName("utilities_expenses");

                    b.Property<long>("VatCollectedAmount")
                        .HasColumnType("bigint")
                        .HasColumnName("vat_collected_amount");

                    b.HasKey("Id")
                        .HasName("id");

                    b.HasIndex("RecordedMonth", "RecordedYear")
                        .IsUnique()
                        .HasDatabaseName("UNIQUE__monthly_statsrecorded_month__recorded_year");

                    b.ToTable("monthly_stats");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_datetime");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("int")
                        .HasColumnName("created_user_id");

                    b.Property<string>("ResourceIds")
                        .HasColumnType("JSON")
                        .HasColumnName("resource_ids");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("id");

                    b.HasIndex("CreatedUserId")
                        .HasDatabaseName("INDEX__notificationscreated_user_id");

                    b.ToTable("notifications");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.NotificationReadUser", b =>
                {
                    b.Property<int>("ReadNotificationId")
                        .HasColumnType("int")
                        .HasColumnName("read_notification_id");

                    b.Property<int>("ReadUserId")
                        .HasColumnType("int")
                        .HasColumnName("read_user_id");

                    b.HasKey("ReadNotificationId", "ReadUserId")
                        .HasName("read_notification_id__read_user_id");

                    b.HasIndex("ReadUserId")
                        .HasDatabaseName("INDEX__notification_read_usersread_user_id");

                    b.ToTable("notification_read_users");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.NotificationReceivedUser", b =>
                {
                    b.Property<int>("ReceivedNotificationId")
                        .HasColumnType("int")
                        .HasColumnName("received_notification_id");

                    b.Property<int>("ReceivedUserId")
                        .HasColumnType("int")
                        .HasColumnName("received_user_id");

                    b.HasKey("ReceivedNotificationId", "ReceivedUserId")
                        .HasName("received_notification_id__received_user_id");

                    b.HasIndex("ReceivedUserId")
                        .HasDatabaseName("INDEX__notification_received_usersreceived_user_id");

                    b.ToTable("notification_received_users");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_datetime");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int")
                        .HasColumnName("created_user_id");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("note");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("row_version");

                    b.Property<DateTime>("StatsDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("stats_datetime");

                    b.HasKey("Id")
                        .HasName("id");

                    b.HasIndex("CreatedUserId")
                        .HasDatabaseName("INDEX__orderscreated_user_id");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("INDEX__orderscustomer_id");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("INDEX__ordersis_deleted");

                    b.HasIndex("StatsDateTime")
                        .HasDatabaseName("INDEX__ordersstats_datetime");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<long>("ProductAmountPerUnit")
                        .HasColumnType("bigint")
                        .HasColumnName("product_amount_per_unit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int>("PurchasedAmount")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("row_version");

                    b.Property<int?>("SupplyItemId")
                        .HasColumnType("int")
                        .HasColumnName("supply_item_id");

                    b.Property<long>("VatAmountPerUnit")
                        .HasColumnType("bigint")
                        .HasColumnName("vat_amount_per_unit");

                    b.HasKey("Id")
                        .HasName("id");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("INDEX__order_itemsorder_id");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("INDEX__order_itemsproduct_id");

                    b.HasIndex("SupplyItemId")
                        .HasDatabaseName("INDEX__order_itemssupply_item_id");

                    b.ToTable("order_items");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.OrderPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("row_version");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("id");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("INDEX__order_photoorder_id");

                    b.HasIndex("Url")
                        .IsUnique()
                        .HasDatabaseName("UNIQUE__order_photourl");

                    b.ToTable("order_photo");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.OrderUpdateHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("NewData")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("JSON")
                        .HasColumnName("new_data");

                    b.Property<string>("OldData")
                        .HasMaxLength(1000)
                        .HasColumnType("JSON")
                        .HasColumnName("old_data");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<string>("Reason")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("reason");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_datetime");

                    b.Property<int>("UpdatedUserId")
                        .HasColumnType("int")
                        .HasColumnName("updated_user_id");

                    b.HasKey("Id")
                        .HasName("id");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("INDEX__order_update_historiesorder_id");

                    b.HasIndex("UpdatedDateTime")
                        .HasDatabaseName("INDEX__order_update_historiesupdated_datetime");

                    b.HasIndex("UpdatedUserId")
                        .HasDatabaseName("INDEX__order_update_historiesupdated_user_id");

                    b.ToTable("order_update_histories");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BrandId")
                        .HasColumnType("int")
                        .HasColumnName("brand_id");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_datetime");

                    b.Property<long>("DefaultPrice")
                        .HasColumnType("bigint")
                        .HasColumnName("default_price");

                    b.Property<int>("DefaultVatPercentage")
                        .HasColumnType("int")
                        .HasColumnName("default_vat_percentage");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsDiscontinued")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_discontinued");

                    b.Property<bool>("IsForRetail")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_for_retail");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<int>("StockingQuantity")
                        .HasColumnType("int")
                        .HasColumnName("stocking_quantity");

                    b.Property<string>("ThumbnailUrl")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("thumbnail_url");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("unit");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_datetime");

                    b.HasKey("Id")
                        .HasName("id");

                    b.HasIndex("BrandId")
                        .HasDatabaseName("INDEX__productsbrand_id");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("INDEX__productscategory_id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("UNIQUE__productsname");

                    b.ToTable("products");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("UNIQUE__product_categoriesname");

                    b.ToTable("product_categories");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.ProductPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("id");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("INDEX__product_photosproduct_id");

                    b.ToTable("product_photos");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("longtext")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("display_name");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("longtext")
                        .HasColumnName("normalized_name");

                    b.Property<int>("PowerLevel")
                        .HasColumnType("int")
                        .HasColumnName("power_level");

                    b.HasKey("Id")
                        .HasName("id");

                    b.HasIndex("DisplayName")
                        .IsUnique()
                        .HasDatabaseName("UNIQUE__rolesdisplay_name");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("UNIQUE__rolesname");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.Supply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_datetime");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int")
                        .HasColumnName("created_user_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("note");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("row_version");

                    b.Property<long>("ShipmentFee")
                        .HasColumnType("bigint")
                        .HasColumnName("shipment_fee");

                    b.Property<DateTime>("StatsDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("stats_datetime");

                    b.HasKey("Id")
                        .HasName("id");

                    b.HasIndex("CreatedUserId")
                        .HasDatabaseName("INDEX__suppliescreated_user_id");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("INDEX__suppliesis_deleted");

                    b.HasIndex("StatsDateTime")
                        .IsUnique()
                        .HasDatabaseName("UNIQUE__suppliesstats_datetime");

                    b.ToTable("supplies");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.SupplyItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("ProductAmountPerUnit")
                        .HasColumnType("bigint")
                        .HasColumnName("product_amount_per_unit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int>("PurchasedAmount")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("row_version");

                    b.Property<int>("SupplyId")
                        .HasColumnType("int")
                        .HasColumnName("supply_id");

                    b.HasKey("Id")
                        .HasName("id");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("INDEX__supply_itemsproduct_id");

                    b.HasIndex("SupplyId")
                        .HasDatabaseName("INDEX__supply_itemssupply_id");

                    b.ToTable("supply_items");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.SupplyPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("row_version");

                    b.Property<int>("SupplyId")
                        .HasColumnType("int")
                        .HasColumnName("supply_id");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("id");

                    b.HasIndex("SupplyId")
                        .HasDatabaseName("INDEX__supply_photosupply_id");

                    b.ToTable("supply_photo");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.SupplyUpdateHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("NewData")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("JSON")
                        .HasColumnName("new_data");

                    b.Property<string>("OldData")
                        .HasMaxLength(1000)
                        .HasColumnType("JSON")
                        .HasColumnName("old_data");

                    b.Property<string>("Reason")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("reason");

                    b.Property<int>("SupplyId")
                        .HasColumnType("int")
                        .HasColumnName("supply_id");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_datetime");

                    b.Property<int>("UpdatedUserId")
                        .HasColumnType("int")
                        .HasColumnName("updated_user_id");

                    b.HasKey("Id")
                        .HasName("id");

                    b.HasIndex("SupplyId")
                        .HasDatabaseName("INDEX__supply_update_historiessupply_id");

                    b.HasIndex("UpdatedDateTime")
                        .HasDatabaseName("INDEX__supply_update_historiesupdated_datetime");

                    b.HasIndex("UpdatedUserId")
                        .HasDatabaseName("INDEX__supply_update_historiesupdated_user_id");

                    b.ToTable("supply_update_histories");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.Treatment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_datetime");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int")
                        .HasColumnName("created_user_id");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("note");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("row_version");

                    b.Property<long>("ServiceAmountBeforeVat")
                        .HasColumnType("bigint")
                        .HasColumnName("service_amount_before_vat");

                    b.Property<long>("ServiceVatAmount")
                        .HasColumnType("bigint")
                        .HasColumnName("service_vat_amount");

                    b.Property<DateTime>("StatsDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("stats_datetime");

                    b.Property<int>("TherapistId")
                        .HasColumnType("int")
                        .HasColumnName("therapist_id");

                    b.HasKey("Id")
                        .HasName("id");

                    b.HasIndex("CreatedUserId")
                        .HasDatabaseName("INDEX__treatmentscreated_user_id");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("INDEX__treatmentscustomer_id");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("INDEX__treatmentsis_deleted");

                    b.HasIndex("StatsDateTime")
                        .HasDatabaseName("INDEX__treatmentsstats_datetime");

                    b.HasIndex("TherapistId")
                        .HasDatabaseName("INDEX__treatmentstherapist_id");

                    b.ToTable("treatments");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.TreatmentItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("ProductAmountPerUnit")
                        .HasColumnType("bigint")
                        .HasColumnName("product_amount_per_unit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int>("PurchasedAmount")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("row_version");

                    b.Property<int>("TreatmentId")
                        .HasColumnType("int")
                        .HasColumnName("treatment_id");

                    b.Property<long>("VatAmountPerUnit")
                        .HasColumnType("bigint")
                        .HasColumnName("vat_amount_per_unit");

                    b.HasKey("Id")
                        .HasName("id");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("INDEX__treatment_itemsproduct_id");

                    b.HasIndex("TreatmentId")
                        .HasDatabaseName("INDEX__treatment_itemstreatment_id");

                    b.ToTable("treatment_items");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.TreatmentPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("row_version");

                    b.Property<int>("TreatmentId")
                        .HasColumnType("int")
                        .HasColumnName("treatment_id");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("id");

                    b.HasIndex("TreatmentId")
                        .HasDatabaseName("INDEX__treatment_photostreatment_id");

                    b.HasIndex("Url")
                        .IsUnique()
                        .HasDatabaseName("UNIQUE__treatment_photosurl");

                    b.ToTable("treatment_photos");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.TreatmentUpdateHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("NewData")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("JSON")
                        .HasColumnName("new_data");

                    b.Property<string>("OldData")
                        .HasMaxLength(1000)
                        .HasColumnType("JSON")
                        .HasColumnName("old_data");

                    b.Property<string>("Reason")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("reason");

                    b.Property<int>("TreatmentId")
                        .HasColumnType("int")
                        .HasColumnName("treatment_id");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_datetime");

                    b.Property<int>("UpdatedUserId")
                        .HasColumnType("int")
                        .HasColumnName("updated_user_id");

                    b.HasKey("Id")
                        .HasName("id");

                    b.HasIndex("TreatmentId")
                        .HasDatabaseName("INDEX__treatment_update_historiestreatment_id");

                    b.HasIndex("UpdatedDateTime")
                        .HasDatabaseName("INDEX__treatment_update_historiesupdated_datetime");

                    b.HasIndex("UpdatedUserId")
                        .HasDatabaseName("INDEX__treatment_update_historiesupdated_user_id");

                    b.ToTable("treatment_update_histories");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("avatar_url");

                    b.Property<DateOnly?>("Birthday")
                        .HasColumnType("date")
                        .HasColumnName("birthday");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("longtext")
                        .HasColumnName("concurrency_stamp");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_datetime");

                    b.Property<string>("Email")
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("first_name");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("fullname");

                    b.Property<int>("Gender")
                        .HasColumnType("int")
                        .HasColumnName("gender");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<DateOnly?>("JoiningDate")
                        .HasColumnType("date")
                        .HasColumnName("joining_date");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("last_name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("lockout_end");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("middle_name");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("longtext")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedFirstName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("normalized_first_name");

                    b.Property<string>("NormalizedFullName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("normalized_fullname");

                    b.Property<string>("NormalizedLastName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("normalized_last_name");

                    b.Property<string>("NormalizedMiddleName")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("normalized_middle_name");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("longtext")
                        .HasColumnName("normalized_username");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("note");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("row_version");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("two_factor_enabled");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_datetime");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("id");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasDatabaseName("UNIQUE__usersusername");

                    b.ToTable("users");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("user_id__role_id");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("INDEX__user_rolesrole_id");

                    b.ToTable("user_roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("NATSInternal.Core.Entities.Role", null)
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__roles__role_claims__role_id");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.Announcement", b =>
                {
                    b.HasOne("NATSInternal.Core.Entities.User", "CreatedUser")
                        .WithMany("CreatedAnnouncements")
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__users__announcements__created_user_id");

                    b.Navigation("CreatedUser");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.Brand", b =>
                {
                    b.HasOne("NATSInternal.Core.Entities.Country", "Country")
                        .WithMany("Brands")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__countries__brands__country_id");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.Consultant", b =>
                {
                    b.HasOne("NATSInternal.Core.Entities.User", "CreatedUser")
                        .WithMany("Consultants")
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__users__consultants__created_user_id");

                    b.HasOne("NATSInternal.Core.Entities.Customer", "Customer")
                        .WithMany("Consultants")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__customers__consultants__customer_id");

                    b.Navigation("CreatedUser");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.ConsultantUpdateHistory", b =>
                {
                    b.HasOne("NATSInternal.Core.Entities.Consultant", "Consultant")
                        .WithMany("UpdateHistories")
                        .HasForeignKey("ConsultantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__consultants__update_histories__consultant_id");

                    b.HasOne("NATSInternal.Core.Entities.User", "UpdatedUser")
                        .WithMany("ConsultantUpdateHistories")
                        .HasForeignKey("UpdatedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__users__update_histories__updated_user_id");

                    b.Navigation("Consultant");

                    b.Navigation("UpdatedUser");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.Customer", b =>
                {
                    b.HasOne("NATSInternal.Core.Entities.User", "CreatedUser")
                        .WithMany("CreatedCustomers")
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__users__customers__created_user_id");

                    b.HasOne("NATSInternal.Core.Entities.Customer", "Introducer")
                        .WithMany("IntroducedCustomers")
                        .HasForeignKey("IntroducerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK__customers__customers__introducer_id");

                    b.Navigation("CreatedUser");

                    b.Navigation("Introducer");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.DailyStats", b =>
                {
                    b.HasOne("NATSInternal.Core.Entities.MonthlyStats", "Monthly")
                        .WithMany("DailyStats")
                        .HasForeignKey("MonthlyStatsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__monthly_stats__daily_stats__monthly_stats_id");

                    b.Navigation("Monthly");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.DebtIncurrence", b =>
                {
                    b.HasOne("NATSInternal.Core.Entities.User", "CreatedUser")
                        .WithMany("Debts")
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__users__debt_incurrences__created_user_id");

                    b.HasOne("NATSInternal.Core.Entities.Customer", "Customer")
                        .WithMany("DebtIncurrences")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__customers__debt_incurrences__customer_id");

                    b.Navigation("CreatedUser");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.DebtIncurrenceUpdateHistory", b =>
                {
                    b.HasOne("NATSInternal.Core.Entities.DebtIncurrence", "DebtIncurrence")
                        .WithMany("UpdateHistories")
                        .HasForeignKey("DebtIncurrenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__debt_incurrences__debt_incurrence_update_histories__debt_incurrence_id");

                    b.HasOne("NATSInternal.Core.Entities.User", "UpdatedUser")
                        .WithMany("DebtUpdateHistories")
                        .HasForeignKey("UpdatedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__users__debt_incurrence_update_histories__updated_user_id");

                    b.Navigation("DebtIncurrence");

                    b.Navigation("UpdatedUser");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.DebtPayment", b =>
                {
                    b.HasOne("NATSInternal.Core.Entities.User", "CreatedUser")
                        .WithMany("DebtPayments")
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__users__debt_payments__created_user_id");

                    b.HasOne("NATSInternal.Core.Entities.Customer", "Customer")
                        .WithMany("DebtPayments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__customers__debt_payments__customer_id");

                    b.Navigation("CreatedUser");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.DebtPaymentUpdateHistory", b =>
                {
                    b.HasOne("NATSInternal.Core.Entities.DebtPayment", "DebtPayment")
                        .WithMany("UpdateHistories")
                        .HasForeignKey("DebtPaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__debt_payments__debt_payment_update_histories__debt_payment_id");

                    b.HasOne("NATSInternal.Core.Entities.User", "UpdatedUser")
                        .WithMany("DebtPaymentUpdateHistories")
                        .HasForeignKey("UpdatedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__users__debt_payment_update_histories__updated_user_id");

                    b.Navigation("DebtPayment");

                    b.Navigation("UpdatedUser");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.Expense", b =>
                {
                    b.HasOne("NATSInternal.Core.Entities.User", "CreatedUser")
                        .WithMany("Expenses")
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__users__expenses__created_user_id");

                    b.HasOne("NATSInternal.Core.Entities.ExpensePayee", "Payee")
                        .WithMany("Expenses")
                        .HasForeignKey("PayeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__expense_payees__expenses__payee_id");

                    b.Navigation("CreatedUser");

                    b.Navigation("Payee");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.ExpensePhoto", b =>
                {
                    b.HasOne("NATSInternal.Core.Entities.Expense", "Expense")
                        .WithMany("Photos")
                        .HasForeignKey("ExpenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__expenses__expense_photos__expense_id");

                    b.Navigation("Expense");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.ExpenseUpdateHistory", b =>
                {
                    b.HasOne("NATSInternal.Core.Entities.Expense", "Expense")
                        .WithMany("UpdateHistories")
                        .HasForeignKey("ExpenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__expenses__expense_update_histories__expense_id");

                    b.HasOne("NATSInternal.Core.Entities.User", "UpdatedUser")
                        .WithMany("ExpenseUpdateHistories")
                        .HasForeignKey("UpdatedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__users__expense_update_histories__updated_user_id");

                    b.Navigation("Expense");

                    b.Navigation("UpdatedUser");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.Notification", b =>
                {
                    b.HasOne("NATSInternal.Core.Entities.User", "CreatedUser")
                        .WithMany("CreatedNotifications")
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK__users__notifications__created_user_id");

                    b.Navigation("CreatedUser");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.NotificationReadUser", b =>
                {
                    b.HasOne("NATSInternal.Core.Entities.Notification", "ReadNotification")
                        .WithMany()
                        .HasForeignKey("ReadNotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__notifications__notification_read_users__read_notification_id");

                    b.HasOne("NATSInternal.Core.Entities.User", "ReadUser")
                        .WithMany()
                        .HasForeignKey("ReadUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__users__notification_read_users__read_user_id");

                    b.Navigation("ReadNotification");

                    b.Navigation("ReadUser");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.NotificationReceivedUser", b =>
                {
                    b.HasOne("NATSInternal.Core.Entities.Notification", "ReceivedNotification")
                        .WithMany()
                        .HasForeignKey("ReceivedNotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__notifications__notification_received_users__received_notification_id");

                    b.HasOne("NATSInternal.Core.Entities.User", "ReceivedUser")
                        .WithMany()
                        .HasForeignKey("ReceivedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__users__notification_received_users__received_user_id");

                    b.Navigation("ReceivedNotification");

                    b.Navigation("ReceivedUser");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.Order", b =>
                {
                    b.HasOne("NATSInternal.Core.Entities.User", "CreatedUser")
                        .WithMany("Orders")
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__users__orders__created_user_id");

                    b.HasOne("NATSInternal.Core.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__customers__orders__customer_id");

                    b.Navigation("CreatedUser");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.OrderItem", b =>
                {
                    b.HasOne("NATSInternal.Core.Entities.Order", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__orders__order_items__order_id");

                    b.HasOne("NATSInternal.Core.Entities.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__products__order_items__product_id");

                    b.HasOne("NATSInternal.Core.Entities.SupplyItem", null)
                        .WithMany("OrderItems")
                        .HasForeignKey("SupplyItemId")
                        .HasConstraintName("FK__supply_items__order_items__supply_item_id");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.OrderPhoto", b =>
                {
                    b.HasOne("NATSInternal.Core.Entities.Order", "Order")
                        .WithMany("Photos")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__orders__order_photo__order_id");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.OrderUpdateHistory", b =>
                {
                    b.HasOne("NATSInternal.Core.Entities.Order", "Order")
                        .WithMany("UpdateHistories")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__orders__order_update_histories__order_id");

                    b.HasOne("NATSInternal.Core.Entities.User", "UpdatedUser")
                        .WithMany("OrderUpdateHistories")
                        .HasForeignKey("UpdatedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__users__order_update_histories__updated_user_id");

                    b.Navigation("Order");

                    b.Navigation("UpdatedUser");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.Product", b =>
                {
                    b.HasOne("NATSInternal.Core.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__brands__products__brand_id");

                    b.HasOne("NATSInternal.Core.Entities.ProductCategory", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__product_categories__products__category_id");

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.ProductPhoto", b =>
                {
                    b.HasOne("NATSInternal.Core.Entities.Product", "Product")
                        .WithMany("Photos")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__products__product_photos__product_id");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.Supply", b =>
                {
                    b.HasOne("NATSInternal.Core.Entities.User", "CreatedUser")
                        .WithMany("Supplies")
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__users__supplies__created_user_id");

                    b.Navigation("CreatedUser");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.SupplyItem", b =>
                {
                    b.HasOne("NATSInternal.Core.Entities.Product", "Product")
                        .WithMany("SupplyItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__products__supply_items__product_id");

                    b.HasOne("NATSInternal.Core.Entities.Supply", "Supply")
                        .WithMany("Items")
                        .HasForeignKey("SupplyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__supplies__supply_items__supply_id");

                    b.Navigation("Product");

                    b.Navigation("Supply");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.SupplyPhoto", b =>
                {
                    b.HasOne("NATSInternal.Core.Entities.Supply", "Supply")
                        .WithMany("Photos")
                        .HasForeignKey("SupplyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__supplies__supply_photo__supply_id");

                    b.Navigation("Supply");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.SupplyUpdateHistory", b =>
                {
                    b.HasOne("NATSInternal.Core.Entities.Supply", "Supply")
                        .WithMany("UpdateHistories")
                        .HasForeignKey("SupplyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__supplies__supply_update_histories__supply_id");

                    b.HasOne("NATSInternal.Core.Entities.User", "UpdatedUser")
                        .WithMany("SupplyUpdateHistories")
                        .HasForeignKey("UpdatedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__users__supply_update_histories__updated_user_id");

                    b.Navigation("Supply");

                    b.Navigation("UpdatedUser");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.Treatment", b =>
                {
                    b.HasOne("NATSInternal.Core.Entities.User", "CreatedUser")
                        .WithMany("CreatedTreatments")
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__users__treatments__created_user_id");

                    b.HasOne("NATSInternal.Core.Entities.Customer", "Customer")
                        .WithMany("Treatments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__customers__treatments__customer_id");

                    b.HasOne("NATSInternal.Core.Entities.User", "Therapist")
                        .WithMany("TreatmentsInCharge")
                        .HasForeignKey("TherapistId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__users__treatments__therapist_id");

                    b.Navigation("CreatedUser");

                    b.Navigation("Customer");

                    b.Navigation("Therapist");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.TreatmentItem", b =>
                {
                    b.HasOne("NATSInternal.Core.Entities.Product", "Product")
                        .WithMany("TreatmentItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__products__treatment_items__product_id");

                    b.HasOne("NATSInternal.Core.Entities.Treatment", "Treatment")
                        .WithMany("Items")
                        .HasForeignKey("TreatmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__treatments__treatment_items__treatment_id");

                    b.Navigation("Product");

                    b.Navigation("Treatment");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.TreatmentPhoto", b =>
                {
                    b.HasOne("NATSInternal.Core.Entities.Treatment", "Treatment")
                        .WithMany("Photos")
                        .HasForeignKey("TreatmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__treatments__treatment_photos__treatment_id");

                    b.Navigation("Treatment");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.TreatmentUpdateHistory", b =>
                {
                    b.HasOne("NATSInternal.Core.Entities.Treatment", "Treatment")
                        .WithMany("UpdateHistories")
                        .HasForeignKey("TreatmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__treatments__treatment_update_histories__treatment_id");

                    b.HasOne("NATSInternal.Core.Entities.User", "UpdatedUser")
                        .WithMany("TreatmentUpdateHistories")
                        .HasForeignKey("UpdatedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__users__treatment_update_histories__updated_user_id");

                    b.Navigation("Treatment");

                    b.Navigation("UpdatedUser");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.UserRole", b =>
                {
                    b.HasOne("NATSInternal.Core.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__roles__user_roles__role_id");

                    b.HasOne("NATSInternal.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__users__user_roles__user_id");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.Consultant", b =>
                {
                    b.Navigation("UpdateHistories");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.Country", b =>
                {
                    b.Navigation("Brands");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.Customer", b =>
                {
                    b.Navigation("Consultants");

                    b.Navigation("DebtIncurrences");

                    b.Navigation("DebtPayments");

                    b.Navigation("IntroducedCustomers");

                    b.Navigation("Orders");

                    b.Navigation("Treatments");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.DebtIncurrence", b =>
                {
                    b.Navigation("UpdateHistories");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.DebtPayment", b =>
                {
                    b.Navigation("UpdateHistories");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.Expense", b =>
                {
                    b.Navigation("Photos");

                    b.Navigation("UpdateHistories");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.ExpensePayee", b =>
                {
                    b.Navigation("Expenses");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.MonthlyStats", b =>
                {
                    b.Navigation("DailyStats");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.Order", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Photos");

                    b.Navigation("UpdateHistories");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.Product", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("Photos");

                    b.Navigation("SupplyItems");

                    b.Navigation("TreatmentItems");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.Role", b =>
                {
                    b.Navigation("Claims");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.Supply", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Photos");

                    b.Navigation("UpdateHistories");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.SupplyItem", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.Treatment", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Photos");

                    b.Navigation("UpdateHistories");
                });

            modelBuilder.Entity("NATSInternal.Core.Entities.User", b =>
                {
                    b.Navigation("ConsultantUpdateHistories");

                    b.Navigation("Consultants");

                    b.Navigation("CreatedAnnouncements");

                    b.Navigation("CreatedCustomers");

                    b.Navigation("CreatedNotifications");

                    b.Navigation("CreatedTreatments");

                    b.Navigation("DebtPaymentUpdateHistories");

                    b.Navigation("DebtPayments");

                    b.Navigation("DebtUpdateHistories");

                    b.Navigation("Debts");

                    b.Navigation("ExpenseUpdateHistories");

                    b.Navigation("Expenses");

                    b.Navigation("OrderUpdateHistories");

                    b.Navigation("Orders");

                    b.Navigation("Supplies");

                    b.Navigation("SupplyUpdateHistories");

                    b.Navigation("TreatmentUpdateHistories");

                    b.Navigation("TreatmentsInCharge");
                });
#pragma warning restore 612, 618
        }
    }
}
